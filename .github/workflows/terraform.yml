# This workflow will provision the infrastructure necessary to deploy our application.

name: terraform

on:
  push:
    branches: [main]
    paths:
      - "terraform/*"
      - ".github/workflows/terraform.yaml"
  pull_request:
    paths:
      - "terraform/*"
      - ".github/workflows/terraform.yaml"
jobs:
  format:
    runs-on: ubuntu-latest

    name: Format

    steps:
      # Clone the repository.
      - uses: actions/checkout@v2
        with:
          # This is required or we end up in detached head state & thus cannot push any changes.
          ref: ${{ github.head_ref }}
      # Download & set up the terraform CLI.
      - name: Set up terraform CLI
        uses: hashicorp/setup-terraform@v1
      - name: Format Check
        working-directory: ./terraform
        id: fmt
        run: terraform fmt -check
        continue-on-error: ${{ github.event_name == 'pull_request' }}
      - name: Annotate Formatting Errors
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        env:
          FORMAT_FAILURE: ${{ steps.fmt.outcome != 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { FORMAT_FAILURE } = process.env

            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            if (FORMAT_FAILURE) {
              const output = `#### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outcome }}\`

              Fix the format in the following files:

              \`\`\`\n
              ${{ steps.fmt.outputs.stdout }}
              \`\`\``;
            } else {
              const output = `#### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outcome }}\`

              Format has been fixed!`;
            }

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else if (FORMAT_FAILURE) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: pass or fail
        if: ${{ steps.fmt.outcome != 'success' }}
        uses: actions/github-script@v6
        with:
          script: core.setFailed('Terraform format check failed!')

  terraform:
    runs-on: ubuntu-latest

    name: Validate, Plan, and Apply
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v2
      # Download & set up the terraform CLI.
      - name: Set up terraform CLI
        uses: hashicorp/setup-terraform@v1
      # Initialize terraform.
      - name: terraform init
        working-directory: ./terraform
        id: init
        run: terraform init -input=false
      - name: terraform validate
        working-directory: ./terraform
        if: ${{ github.event_name == 'pull_request' }}
        id: validate
        run: terraform validate -no-color
      - name: terraform plan
        working-directory: ./terraform
        if: ${{ github.event_name == 'pull_request' }}
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: pass or fail
        if: ${{ steps.plan.outcome != 'success' }}
        uses: actions/github-script@v6
        with:
          script: core.setFailed('Terraform plan failed!')
      - name: terraform apply
        working-directory: ./terraform
        if: ${{ github.event_name == 'push' && github.ref == 'refs/head/main' }}
        id: apply
        run: terraform apply -auto-approve -input=false
